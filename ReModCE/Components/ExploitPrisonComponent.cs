using ReModAres.Core;
using ReModAres.Core.Managers;
using Serpent.Loader;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using VRC.Networking;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;

namespace Serpent.Components
{
    internal class ExploitPrisonComponent : ModComponent
    {

        public ExploitPrisonComponent()
        {

        }

        private readonly Il2CppSystem.Object[] SyncKill = new Il2CppSystem.Object[1] { "SyncKill" };

        public override void OnUiManagerInit(UiManager uiManager)
        {
            base.OnUiManagerInit(uiManager);

            var subMenu = uiManager.MainMenu.GetMenuPage(Page.PageNames.WorldCheats);
            var cheatMenu = subMenu.AddMenuPage("Prison Escape", "Prison Escape Cheats", ResourceManager.GetSprite("remodce.world"));

            cheatMenu.AddButton($"Force Pickup", "Allows You To Steal Other's Pickups", ForcePickup, ResourceManager.GetSprite("remodce.pickup"));

            cheatMenu.AddButton($"Get all weapons", "Give yourself all the weapons", GetAllWeapons, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give Pistol", "Give yourself a Pistol", GivePistol, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give ShotGun", "Give yourself a Shotgun", GiveShotgun, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give SMG", "Give yourself a SMG", GiveSMG, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give Sniper", "Give yourself a Sniper", GiveSniper, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give Magnum", "Give yourself a Magnum", GiveMagnum, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give M4A1", "Give yourself a M4A1", GiveM4A1, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give Revolver", "Give yourself a Revolver", GiveRevolver, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give Knife", "Give yourself a Knife", GiveKnife, ResourceManager.GetSprite("remodce.weapons"));

            cheatMenu.AddButton($"Give KeyCard", "Give yourself a KeyCard", GiveKeyCard, ResourceManager.GetSprite("remodce.weapons"));
        }


        public void GetAllWeapons()
        {
            ReLogger.Msg("Gave yourself all weapons");
            Serpent.LogDebug("Gave yourself all weapons");
            MurderGive("ShotGun");
            MurderGive("Knife");
            MurderGive("Pistol");
            MurderGive("SMG");
            MurderGive("Sniper");
            MurderGive("M4A1");
            MurderGive("Magnum");
        }

        public void GiveKeyCard()
        {
            ReLogger.Msg("Gave yourself a KeyCard");
            Serpent.LogDebug("Gave yourself a KeyCard");
            MurderGive("Keycard");
        }

        public void GiveKnife()
        {
            ReLogger.Msg("Gave yourself a Knife");
            Serpent.LogDebug("Gave yourself a Knife");
            MurderGive("Knife");
        }

        public void GivePistol()
        {
            ReLogger.Msg("Gave yourself a Pistol");
            Serpent.LogDebug("Gave yourself a Pistol");
            MurderGive("Pistol");
        }

        public void GiveShotgun()
        {
            ReLogger.Msg("Gave yourself a Shotgun");
            Serpent.LogDebug("Gave yourself a Shotgun");
            MurderGive("Shotgun");
        }

        public void GiveSMG()
        {
            ReLogger.Msg("Gave yourself a SMG");
            Serpent.LogDebug("Gave yourself a SMG");
            MurderGive("SMG");
        }

        public void GiveSniper()
        {
            ReLogger.Msg("Gave yourself a Sniper");
            Serpent.LogDebug("Gave yourself a Sniper");
            MurderGive("Sniper");
        }

        public void GiveMagnum()
        {
            ReLogger.Msg("Gave yourself a Magnum");
            Serpent.LogDebug("Gave yourself a Magnum");
            MurderGive("Magnum");
        }

        public void GiveM4A1()
        {
            ReLogger.Msg("Gave yourself a M4A1");
            Serpent.LogDebug("Killed Everyone");
            MurderGive("M4A1");
        }

        public void GiveRevolver()
        {
            ReLogger.Msg("Gave yourself a revolver");
            Serpent.LogDebug("Killed Everyone");
            MurderGive("Revolver");
        }

        public void ForcePickup()
        {
            ReLogger.Msg("Force Pickup Is Active");
            PickupSteal();
        }

        public static void MurderCheat(string udonEvent)
        {

            foreach (GameObject item in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if (item.name.Contains("Game Logic"))
                {
                    item.GetComponent<UdonBehaviour>().SendCustomNetworkEvent(NetworkEventTarget.All, udonEvent);
                }
            }
        }

        public static void MurderGive(string ObjectName)
        {
            foreach (GameObject item in Resources.FindObjectsOfTypeAll<GameObject>())
            {
                if (item.name.Contains(ObjectName) && (!item.name.Contains("Give")) && (!item.name.Contains("Teleport")))
                {
                    Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, item);
                    item.transform.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.1f, 0f);
                }
            }
        }

        public static void PickupSteal()
        {
            VRC_Pickup[] array = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray();
            for (int i = 0; i < array.Length; i++)
            {
                if ((bool)array[i].gameObject)
                {
                    array[i].DisallowTheft = false;
                }
            }
            VRC_Pickup[] array2 = Resources.FindObjectsOfTypeAll<VRC_Pickup>().ToArray();
            for (int j = 0; j < array2.Length; j++)
            {
                if ((bool)array2[j].gameObject)
                {
                    array2[j].DisallowTheft = false;
                }
            }
            VRCPickup[] array3 = Resources.FindObjectsOfTypeAll<VRCPickup>().ToArray();
            for (int k = 0; k < array3.Length; k++)
            {
                if ((bool)array3[k].gameObject)
                {
                    array3[k].DisallowTheft = false;
                }
            }
        }

        private static int Count;
        private void Kill()
        {
            using IEnumerator<UdonSync> enumerator = Resources.FindObjectsOfTypeAll<UdonSync>().GetEnumerator();
            Count = 0;
            while (enumerator.MoveNext())
            {
                UdonSync current;
                if ((current = enumerator.Current).gameObject.name.Contains("Player Node"))
                {
                    Count++;
                    Networking.RPC(RPC.Destination.All, current.gameObject, "UdonSyncRunProgramAsRPC", SyncKill);
                }
            }
        }
    }
}
