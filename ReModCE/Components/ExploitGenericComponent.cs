using System.Collections;
using Il2CppSystem.Collections.Generic;
using ReModAres.Core;
using ReModAres.Core.Managers;
using ReModAres.Core.UI.QuickMenu;
using Serpent.Loader;
using UnityEngine;
using VRC.Core;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;

namespace Serpent.Components
{
    internal class ExploitGenericComponent : ModComponent
    {

        private ConfigValue<bool> InfJumpEnabled;
        private ReMenuToggle _infJumpToggle;

        private ConfigValue<bool> ForceJumpEnabled;
        private ReMenuToggle _forceJumpToggle;


        public ExploitGenericComponent()
        {
            InfJumpEnabled = new ConfigValue<bool>(nameof(InfJumpEnabled), false);
            InfJumpEnabled.OnValueChanged += () => _infJumpToggle.Toggle(InfJumpEnabled);

            ForceJumpEnabled = new ConfigValue<bool>(nameof(ForceJumpEnabled), false);
            ForceJumpEnabled.OnValueChanged += () => _forceJumpToggle.Toggle(ForceJumpEnabled);
        }

        public override void OnUiManagerInit(UiManager uiManager)
        {
            base.OnUiManagerInit(uiManager);

            var subMenu = uiManager.MainMenu.GetMenuPage(Page.PageNames.WorldCheats);


            var cheatMenu = subMenu.AddMenuPage("Generic World Stuff", "", ResourceManager.GetSprite("remodce.world"));

            _infJumpToggle = cheatMenu.AddToggle($"Inf Jump", "Inf jump, jump all the way to the moon", InfJumpEnabled.SetValue,
                InfJumpEnabled);

            _forceJumpToggle = cheatMenu.AddToggle($"Force Jump", "Allow jumping in any worlds", ForceJumpEnabled.SetValue,
                ForceJumpEnabled);

        }

        public override void OnUpdate()
        {
            if (InfJumpEnabled)
            {
                if ((double)VRCInputManager.Method_Public_Static_VRCInput_String_0("Jump").prop_Single_2 != 1.0)
                    return;
                Networking.LocalPlayer.SetVelocity(Networking.LocalPlayer.GetVelocity() with
                {
                    y = 3f
                });
            }

            if (ForceJumpEnabled)
            {
                if (!VRCInputManager.Method_Public_Static_VRCInput_String_0("Jump").prop_Boolean_2 || !Networking.LocalPlayer.IsPlayerGrounded())
                    return;
                Networking.LocalPlayer.SetVelocity(Networking.LocalPlayer.GetVelocity() with
                {
                    y = 3f
                });
            }
        }
    }
}
